services:
  # API Service
  api:
    build: .
    ports:
      - "${PORT:-8080}:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT:-8080}
      - MAX_DB_CONNECTIONS=${MAX_DB_CONNECTIONS:-25}
      - MAX_IDLE_CONNECTIONS=${MAX_IDLE_CONNECTIONS:-5}
      - CONN_MAX_LIFETIME_MINUTES=${CONN_MAX_LIFETIME_MINUTES:-30}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - transfers-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-transfers}
      - POSTGRES_USER=${POSTGRES_USER:-transfers_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-transfers_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - transfers-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-transfers_user} -d ${POSTGRES_DB:-transfers}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  transfers-network:
    driver: bridge
